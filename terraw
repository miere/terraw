#!/bin/sh
cd $(dirname $0)

# FUNCTIONS
usage(){
  warn "Usage: $0 <apply|destroy|import|init|refresh>"
}

debug(){
  if [ ! "${DEBUG}" = "" ]; then
    echo "$@"
  fi
}

warn(){
  echo "$@" 1>&2
}

initialize_terraform(){
  echo "Configuring environment '$1'..."

  mkdir -p ${LOCAL_TERRAFORM_DIR}

  if [ -f ${LOCAL_TERRAFORM_DIR}/terraw.env ]; then
    CURRENT=$(cat ${LOCAL_TERRAFORM_DIR}/terraw.env)
    if [ -f ${LOCAL_TERRAFORM_DIR}/terraform.tfstate ]; then
      mv ${LOCAL_TERRAFORM_DIR}/terraform.tfstate ${LOCAL_TERRAFORM_DIR}/terraform.tfstate.$CURRENT
    fi
    if [ ! "$CURRENT" = "$1" ]; then
      if [ -f ${LOCAL_TERRAFORM_DIR}/terraform.tfstate.$1 ]; then
         mv ${LOCAL_TERRAFORM_DIR}/terraform.tfstate.$1 ${LOCAL_TERRAFORM_DIR}/terraform.tfstate
      fi
    fi
  fi

  echo "$1" > ${LOCAL_TERRAFORM_DIR}/terraw.env
  ${TERRAFORM} init ${TF_OPTS_INIT} ${TF_SRCDIR}

  debug "Terraform was configured for '$1' environment."
}

install_terraform(){
  debug "Downloading and installing Terraform ${TERRAFORM_VERSION}..."
  rm -rf ${TMP_DIR}
  curl -s -o /tmp/terraform.zip $PACKAGE_URL
  unzip -d ${TMP_DIR} /tmp/terraform.zip
  chmod +x ${TMP_DIR}/*
  debug "Installed terraform ${TERRAFORM_VERSION}."
}

# VERIFICATIONS
if [ "$#" = "0" ]; then
  warn "No command defined"
  usage && exit 1
fi

## VARIABLES
DEBUG=${DEBUG:-}
DIST=""
case "$OSTYPE" in
  linux*) DIST="linux_amd64" ;;
  darwin*|"") DIST="darwin_amd64" ;;
esac

TF_SRCDIR=${TF_SRCDIR:-$(pwd)}
LOCAL_TERRAFORM_DIR="${TF_SRCDIR}/.terraform"

if [ -f ./terraw.conf ]; then
  . ./terraw.conf
fi

TERRAFORM=$(command -v terraform)
TERRAFORM_VERSION=${TERRAFORM_VERSION:-"0.12.8"}
TMP_DIR=/tmp/terraform${TERRAFORM_VERSION}
PACKAGE_URL="https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_${DIST}.zip"
CMD="$1"; shift

if [ ! "$CMD" = "init" ] && [ ! "$CMD" = "deploy" ]; then
  if [ ! -d "${LOCAL_TERRAFORM_DIR}" ]; then
     warn "Terraform not initialized. Aborting..."
     warn $LOCAL_TERRAFORM_DIR
     exit 3
  fi

  if [ ! -f "${LOCAL_TERRAFORM_DIR}/terraw.env" ]; then
     warn "This terraform project wasn't initialized by terraw."
     exit 4
  fi
  ENV=$(cat ${LOCAL_TERRAFORM_DIR}/terraw.env)
elif [ "$1" = "" ]; then
  warn "No deployment environment defined"
  warn "Usage: $0 <init|deploy> [ENV]"
  exit 1
else
  ENV=$1; shift
fi

if [ "$ENV" = "" ]; then
  warn "Could not find environment configuration."
  warn "Please ensure that you have properly initialized 'terraw'."
  warn "To initialize type: $0 init <ENV>"
  echo
  exit 6
fi

TF_VARS=${TF_VARS:-${TF_SRCDIR}/env-${ENV}.tfvars}
TF_BACKEND=${TF_BACKEND:-${TF_SRCDIR}/env-${ENV}-backend.tfvars}
TF_OPTS=${TF_OPTS:-}
TF_OPTS_INIT=${TF_OPTS_INIT:-}

if [ ! "${DEBUG}" = "" ]; then
  export TF_LOG=${DEBUG}
fi

if [ -f "${TF_VARS}" ]; then
  TF_OPTS="$TF_OPTS -var-file=${TF_VARS}"
  debug "Using '${TF_VARS}' as config file"
else
  debug "No config file found. Expected: $TF_VARS"
fi

if [ -f "${TF_BACKEND}" ]; then
  TF_OPTS_INIT="$TF_OPTS_INIT -backend-config=${TF_BACKEND}"
  debug "Using '${TF_BACKEND}' as backend config file"
else
  debug "No backend file found: $TF_BACKEND"
fi

## USING THE CORRECT TERRAFORM VERSION
CURRENT_VERSION=""
if [ ! "$TERRAFORM" = "" ]; then
    CURRENT_VERSION=$($TERRAFORM --version| head -n 1 | sed 's/[^0-9]*\([0-9]*\.[0-9]*\.[0-9]*\).*/\1/')
fi

if [ ! "$CURRENT_VERSION" = "$TERRAFORM_VERSION" ]; then
  export TERRAFORM="${TMP_DIR}/terraform"
  if [ ! -f $TERRAFORM ]; then
    install_terraform
  else
    debug "Using terraform ${TERRAFORM_VERSION} that has been previously downloaded"
  fi
fi

# MAIN
case "$CMD" in
  deploy)
    TERRAW="$(pwd)/$(basename $0)"
    $TERRAW init $ENV || exit 50
    $TERRAW apply     || exit 50
  ;;

  destroy)
    echo "Destroying environment '$ENV'"
    ${TERRAFORM} destroy -auto-approve ${TF_OPTS} ${TF_SRCDIR}
  ;;

  apply)
    echo "Apply changes into environment '$ENV'"
    ${TERRAFORM} apply   -auto-approve ${TF_OPTS} ${TF_SRCDIR}
  ;;

  plan)
    echo "Executing 'plan' defined for '$ENV'"
    ${TERRAFORM} plan ${TF_OPTS} ${TF_SRCDIR}
  ;;

  import)
    echo "Importing environment '$ENV'"
    ${TERRAFORM} import ${TF_OPTS} $@
  ;;

  state)
    echo "Listing the Terraform state for environment '$ENV'"
    echo ${TF_OPTS}
    ${TERRAFORM} state $@
  ;;

  refresh)
    echo "Refreshing environment '$ENV'"
    ${TERRAFORM} refresh ${TF_OPTS} ${TF_SRCDIR}
  ;;

  init)   initialize_terraform $ENV ;;
  build)  warn 'Nothing to do here... for now!' ;;
  *)      usage && exit 1 ;;
esac
